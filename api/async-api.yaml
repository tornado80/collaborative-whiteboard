asyncapi: 3.0.0
info:
  title: Collaborative Whiteboard
  version: 1.0.0
  description: |-
    A collaborative whiteboard is a shared digital whiteboard that allows multiple users to draw, write, and erase content in real-time. 
    This API allows you to manage the whiteboard and its content.
defaultContentType: application/json
channels:
  root:
    address: /
    messages:
      draw:
        $ref: '#/components/messages/draw'
      erase:
        $ref: '#/components/messages/erase'
      reservationProposed:
        $ref: '#/components/messages/reservationProposed'
      reservationProposalSucceeded:
        $ref: '#/components/messages/reservationProposalSucceeded'
      reservationProposalFailed:
        $ref: '#/components/messages/reservationProposalFailed'
      reservationCancellationRequested:
        $ref: '#/components/messages/reservationCancellationRequested'
      reservationCancelled:
        $ref: '#/components/messages/reservationCancelled'
      reservationExpired:
        $ref: '#/components/messages/reservationExpired'
      canvasObjectReserved:
        $ref: '#/components/messages/canvasObjectReserved'
      userJoined:
        $ref: '#/components/messages/userJoined'
      userLeft:
        $ref: '#/components/messages/userLeft'
      welcomeUser:
        $ref: '#/components/messages/welcomeUser'
      boardUpdated:
        $ref: '#/components/messages/boardUpdated'
      boardUpdateProposed:
        $ref: '#/components/messages/boardUpdateProposed'
      boardUpdateFailed:
        $ref: '#/components/messages/boardUpdateFailed'
      boardUpdateSucceeded:
        $ref: '#/components/messages/boardUpdateSucceeded'
operations:
  sendDraw:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/draw'
  sendErase:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/erase'
  receiveDraw:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/draw'
  receiveErase:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/erase'
  reservationProposed:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationProposed'
    reply:
      messages:
        - $ref: '#/components/messages/reservationProposalSucceeded'
        - $ref: '#/components/messages/reservationProposalFailed'
      channel:
        $ref: '#/channels/root'
  reservationCancellationRequested:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationCancellationRequested'
  reservationCancelled:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationCancelled'
  reservationExpired:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationExpired'
  canvasObjectReserved:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/canvasObjectReserved'
  userJoined:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/userJoined'
  userLeft:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/userLeft'
  welcomeUser:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/welcomeUser'
  boardUpdated:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/boardUpdated'
  boardUpdateProposed:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/boardUpdateProposed'
    reply:
      messages:
        - $ref: '#/components/messages/boardUpdateSucceeded'
        - $ref: '#/components/messages/boardUpdateFailed'
      channel:
        $ref: '#/channels/root'
components:
  messages:
    draw:
      payload:
        $ref: '#/components/schemas/drawPayload'
    erase:
      payload:
        $ref: '#/components/schemas/erasePayload'
    reservationProposed:
      payload:
        $ref: '#/components/schemas/reservationProposedPayload'
    reservationCancellationRequested:
      payload:
        $ref: '#/components/schemas/reservationCancellationRequestedPayload'
    reservationCancelled:
      payload:
        $ref: '#/components/schemas/reservationCancelledPayload'
    reservationExpired:
      payload:
        $ref: '#/components/schemas/reservationExpiredPayload'
    canvasObjectReserved:
      payload:
        $ref: '#/components/schemas/canvasObjectReservedPayload'
    reservationProposalSucceeded:
      payload:
        $ref: '#/components/schemas/reservationProposalSucceededPayload'
    reservationProposalFailed:
      payload:
        $ref: '#/components/schemas/reservationProposalFailedPayload'
    userJoined:
      payload:
        $ref: '#/components/schemas/userPayload'
    userLeft:
      payload:
        $ref: '#/components/schemas/userPayload'
    welcomeUser:
      payload:
        $ref: '#/components/schemas/welcomeUserPayload'
    boardUpdateProposed:
      payload:
        $ref: '#/components/schemas/boardUpdateProposedPayload'
    boardUpdated:
      payload:
        $ref: '#/components/schemas/boardUpdatedPayload'
    boardUpdateFailed:
      payload:
        $ref: '#/components/schemas/boardUpdateFailedPayload'
    boardUpdateSucceeded:
      payload:
        $ref: '#/components/schemas/boardUpdateSucceededPayload'
  schemas:
    erasePayload:
      type: object
      description: A list of square centers together with erase size
      properties:
        size:
          type: integer
          description: Eraser square size
        centers:
          type: array
          items:
            $ref: '#/components/schemas/vec2'
    drawPayload:
      type: object
      properties:
        points:
          type: array
          items:
            $ref: '#/components/schemas/vec2'
        color:
            $ref: '#/components/schemas/color'
    createStickyNotePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: createStickyNote
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Sticky note text
            color:
              $ref: '#/components/schemas/color'
    createCommentPayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: createComment
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Comment text
            timestamp:
              type: long
              description: Timestamp of the comment
    createImage:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: createImage
            name:
              type: string
            position:
              $ref: '#/components/schemas/vec2'
            size:
              $ref: '#/components/schemas/vec2'
            width:
              type: integer
    updateStickyNote:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: updateStickyNote
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Sticky note text
            color:
              $ref: '#/components/schemas/color'
    updateComment:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: updateComment
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Comment text
            timestamp:
              type: long
              description: Timestamp of the comment
    deleteStickyNote:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteStickyNote
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
    deleteImage:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteImage
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
    deleteComment:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteComment
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
    vec2:
      type: object
      properties:
        x:
          type: integer
          description: X coordinate of the point
        y:
          type: integer
          description: Y coordinate of the point    
    color:
      type: object
      properties:
        r:
          type: integer
          description: Red component of the color
        g:
          type: integer
          description: Green component of the color
        b:
          type: integer
          description: Blue component of the color
        a: 
          type: integer
          description: Alpha component of the color
    canvasObjectOperation:
      type: object
      discriminator: canvasObjectOperationType
      properties:
        canvasObjectOperationType:
          enum:
            - createStickyNote
            - createImage
            - createComment
            - updateStickyNote
            - updateComment
            - deleteStickyNote
            - deleteImage
            - deleteComment
      required:
        - canvasObjectOperationType
    updatePayload:
      type: object
      required:
        - canvasObjectId
        - operation
      properties:
        canvasObjectType:
          enum:
            - stickyNote
            - image
            - comment
        operation:
          enum:
            - create
            - update
            - delete
        newValue:
          $ref: '#/components/schemas/canvasObjectOperation'
          description: New or partial (differential) value of the canvas object
    updatedPayload:
      allOf:
        - $ref: '#/components/schemas/updatePayload'
        - type: object
          properties:
            canvasObjectId:
              type: integer
              description: Unique identifier of the canvas object
    boardUpdateProposedPayload:
      type: object
      properties:
        updateId:
          type: integer
          description: Unique identifier of the update request chosen by the client
        update: 
          $ref: '#/components/schemas/updatePayload'
        intermediate:
          type: boolean
          description: Indicates if the update is intermediate
    boardUpdateSucceededPayload:
      type: object
      properties:
        updateId:
          type: integer
          description: Unique identifier of the update request
        canvasObjectId:
          type: integer
          description: Unique identifier of the canvas object
    boardUpdatedPayload:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/updatedPayload'
        userId:
          type: integer
          description: Unique identifier of the user who made the update
        intermediate:
          type: boolean
          description: Indicates if the update is intermediate
    boardUpdateFailedPayload:
      type: object
      properties:
        errorMessage:
          type: string
        updateId:
          type: integer
          description: Unique identifier of the update request
    welcomeUserPayload:
      type: object
      properties:
        userId:
          type: integer
          decription: User unique identifier
        sessionToken:
          type: string
          description: Secret session token allocated to the user
    userPayload:
      type: object
      properties:
        userId:
          type: integer
          decription: User unique identifier
    reservationProposedPayload:
      type: object
      properties:
        canvasObjectId:
          type: integer
          description: Canvas object unique identifier
        proposalId:
          type: integer
          description: Proposal request uniques identifier that will be used in server reply
    canvasObjectReservedPayload:
      type: object
      properties:
        canvasObjectId:
          type: integer
          description: Canvas object unique identifier
        reservationId:
          type: integer
          description: Reservation unique identifier
        userId:
          type: integer
          description: Indicates unique identifier of the user who reserved the canvas object
        expirationTimestamp:
          type: long
          description: Indicates when the reservation will expire
    reservationProposalSucceededPayload:
      type: object
      properties:
        reservationId:
          type: integer
          description: Reservation unique identifier
        proposalId:
          type: integer
          description: Proposal request unique identifier that was used in client request
        expirationTimestamp:
          type: long
          description: Indicates when the reservation will expire
    reservationProposalFailedPayload:
      type: object
      properties:
        errorMessage:
          type: string
        proposalId:
          type: integer
          description: Proposal request unique identifier that was used in client request
    reservationCancellationRequestedPayload:
      type: object
      properties:
        reservationId:
          type: integer
          description: Reservation unique identifier
    reservationCancelledPayload:
      type: object
      properties:
        reservationId:
          type: integer
          description: Reservation unique identifier
    reservationExpiredPayload:
      type: object
      properties:
        reservationId:
          type: integer
          description: Reservation unique identifier
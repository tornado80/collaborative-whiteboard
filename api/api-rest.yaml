openapi: 3.0.3
info:
  title: Collaborative Whiteboard
  version: 1.0.0
  description: |-
    A collaborative whiteboard is a shared digital whiteboard that allows multiple users to draw, write, and erase content in real-time. 
    This API allows you to manage the whiteboard and its content.
paths:
  /new:
    get:
      responses:
        '303':
          description: Create board and redirect to React App
          headers:
            Location:
              schema:
                type: string
                example: /boards/123e4567-e89b-12d3-a456-426614174000
  /boards/{boardId}:
    get:
      responses:
        '200':
          description: React App
          content:
            text/html:
              schema:
                type: string
  /api/rest/boards:
    post:
      responses:
        '201':
          description: New board with the returned id is created
          headers:
            Location:
              schema:
                type: string
                format: uuid
                example: 123e4567-e89b-12d3-a456-426614174000
          content:
            application/json:
              schema:
                type: object
                properties:
                  boardId:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
  /api/rest/boards/{boardId}:
    parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      responses:
        '200':
          description: Current board state is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
  /api/rest/boards/{boardId}/blobs:
    post:
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '201':
          description: An image blob is created with the returned id
          content:
            application/json:
              schema:
                type: object
                properties:
                  blobId:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
  /api/rest/boards/{boardId}/blobs/{blobId}:
    get:
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: blobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Image blob with the given id is returned
          content:
            image/png:
              schema:
                type: string
                format: binary
components:
  schemas:
    CanvasObject:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000 
        zIndex:
          type: integer
          format: int64
          example: 1000
        position:
          $ref: '#/components/schemas/Vector2'
        canvasObjectType:
          type: string
          enum:
            - StickyNote
            - Image
            - Comment
            - Curve
      discriminator:
        propertyName: canvasObjectType
      required:
        - canvasObjectType
    StickyNote:
      allOf:
        - $ref: '#/components/schemas/CanvasObject'
        - type: object
          properties:
            canvasObjectType:
              type: string
              enum:
                - StickyNote
            text:
              type: string
              example: 'This is a sticky note'
            color:
              $ref: '#/components/schemas/Color'
    Image:
      allOf:
        - $ref: '#/components/schemas/CanvasObject'
        - type: object
          properties:
            canvasObjectType:
              type: string
              enum:
                - Image
            width:
              type: integer
              format: int64
              example: 100
            size:
              $ref: '#/components/schemas/Vector2'
            blobId:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
    Comment:
      allOf:
        - $ref: '#/components/schemas/CanvasObject'
        - type: object
          properties:
            canvasObjectType:
              type: string
              enum:
                - Comment
            text:
              type: string
              example: 'This is a comment'
            timestamp:
              type: integer
              format: int64
              example: 123456789
            imageId:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
    Vector2:
      type: object
      properties:
        x:
          type: integer
          format: int64
          example: 100
        y:
          type: integer
          format: int64
          example: 100
    Curve:
      allOf:
        - $ref: '#/components/schemas/CanvasObject'
        - type: object
          properties:
            canvasObjectType:
              type: string
              enum:
                  - Curve
            points:
              type: array
              items:
                $ref: '#/components/schemas/Vector2'
            color:
              $ref: '#/components/schemas/Color'
    Board:
      type: object
      properties:
        canvasObjects:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/StickyNote'
              - $ref: '#/components/schemas/Comment'
              - $ref: '#/components/schemas/Image'
              - $ref: '#/components/schemas/Curve'
            discriminator:
              propertyName: canvasObjectType
        name:
          type: string
        lastUpdateId:
          type: integer
          format: int64
        activeUsers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: John Doe
        color:
          $ref: '#/components/schemas/Color'
    Color:
      type: string
      example: '#FF0000FF'
asyncapi: 3.0.0
info:
  title: Collaborative Whiteboard
  version: 1.0.0
  description: |-
    A collaborative whiteboard is a shared digital whiteboard that allows multiple users to draw, write, and erase content in real-time. 
    This API allows you to manage the whiteboard and its content.
defaultContentType: application/json
channels:
  root:
    address: /api/ws/boards/{boardId}
    parameters:
      boardId:
        description: Unique identifier of the board
        schema:
          type: string
          format: uuid
    messages:
      begin:
        $ref: '#/components/messages/begin'
      reservationProposed:
        $ref: '#/components/messages/reservationProposed'
      reservationProposalSucceeded:
        $ref: '#/components/messages/reservationProposalSucceeded'
      reservationProposalFailed:
        $ref: '#/components/messages/reservationProposalFailed'
      reservationCancellationRequested:
        $ref: '#/components/messages/reservationCancellationRequested'
      reservationCancelled:
        $ref: '#/components/messages/reservationCancelled'
      reservationExpired:
        $ref: '#/components/messages/reservationExpired'
      canvasObjectReserved:
        $ref: '#/components/messages/canvasObjectReserved'
      userJoined:
        $ref: '#/components/messages/userJoined'
      userLeft:
        $ref: '#/components/messages/userLeft'
      welcomeUser:
        $ref: '#/components/messages/welcomeUser'
      boardUpdated:
        $ref: '#/components/messages/boardUpdated'
      boardUpdateProposed:
        $ref: '#/components/messages/boardUpdateProposed'
      boardUpdateFailed:
        $ref: '#/components/messages/boardUpdateFailed'
      boardUpdateSucceeded:
        $ref: '#/components/messages/boardUpdateSucceeded'
      undoRequested:
        $ref: '#/components/messages/undoRequested'
      redoRequested:
        $ref: '#/components/messages/redoRequested'
operations:
  begin:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/begin'
    reply:
      messages:
        - $ref: '#/components/messages/welcomeUser'
      channel:
        $ref: '#/channels/root'
  reservationProposed:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationProposed'
    reply:
      messages:
        - $ref: '#/components/messages/reservationProposalSucceeded'
        - $ref: '#/components/messages/reservationProposalFailed'
      channel:
        $ref: '#/channels/root'
  reservationCancellationRequested:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationCancellationRequested'
  reservationCancelled:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationCancelled'
  reservationExpired:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/reservationExpired'
  canvasObjectReserved:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/canvasObjectReserved'
  userJoined:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/userJoined'
  userLeft:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/userLeft'
  boardUpdated:
    action: receive
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/boardUpdated'
  undoRequested:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/undoRequested'
  redoRequested:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/redoRequested'
  boardUpdateProposed:
    action: send
    channel:
      $ref: '#/channels/root'
    messages:
      - $ref: '#/components/messages/boardUpdateProposed'
    reply:
      messages:
        - $ref: '#/components/messages/boardUpdateSucceeded'
        - $ref: '#/components/messages/boardUpdateFailed'
      channel:
        $ref: '#/channels/root'
components:
  messages:
    begin:
      payload:
        $ref: '#/components/schemas/beginPayload'
    reservationProposed:
      payload:
        $ref: '#/components/schemas/reservationProposedPayload'
    reservationCancellationRequested:
      payload:
        $ref: '#/components/schemas/reservationCancellationRequestedPayload'
    reservationCancelled:
      payload:
        $ref: '#/components/schemas/reservationCancelledPayload'
    reservationExpired:
      payload:
        $ref: '#/components/schemas/reservationExpiredPayload'
    canvasObjectReserved:
      payload:
        $ref: '#/components/schemas/canvasObjectReservedPayload'
    reservationProposalSucceeded:
      payload:
        $ref: '#/components/schemas/reservationProposalSucceededPayload'
    reservationProposalFailed:
      payload:
        $ref: '#/components/schemas/reservationProposalFailedPayload'
    userJoined:
      payload:
        $ref: '#/components/schemas/userPayload'
    userLeft:
      payload:
        $ref: '#/components/schemas/userPayload'
    welcomeUser:
      payload:
        $ref: '#/components/schemas/welcomeUserPayload'
    boardUpdateProposed:
      payload:
        $ref: '#/components/schemas/boardUpdateProposedPayload'
    boardUpdated:
      payload:
        $ref: '#/components/schemas/boardUpdatedPayload'
    boardUpdateFailed:
      payload:
        $ref: '#/components/schemas/boardUpdateFailedPayload'
    boardUpdateSucceeded:
      payload:
        $ref: '#/components/schemas/boardUpdateSucceededPayload'
    undoRequested:
      payload:
        $ref: '#/components/schemas/undoRequestPayload'
    redoRequested:
      payload:
        $ref: '#/components/schemas/redoRequestPayload'
  schemas:
    event:
      type: object
      discriminator: eventType
      properties:
        eventId:
          type: integer
          format: int64
          description: Unique identifier of the event
        eventTimestamp:
          type: integer
          format: int64
          description: Timestamp of the event
        eventType:
          type: string
          description: Type of the event
          enum:
            - begin
            - reservationProposed
            - reservationProposalSucceeded
            - reservationProposalFailed
            - reservationCancellationRequested
            - reservationCancelled
            - reservationExpired
            - canvasObjectReserved
            - userJoined
            - userLeft
            - welcomeUser
            - boardUpdated
            - boardUpdateProposed
            - boardUpdateFailed
            - boardUpdateSucceeded
            - undoRequested
            - redoRequested
    beginPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: begin
            sessionType:
              type: string
              enum:
                - new
                - continue
            sessionToken:
              type: string
              format: uuid
              description: Previous session token if sessionType is continue
            lastEventId:
              type: integer
              format: int64
              description: Last event identifier received by the client
    undoRequestPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: undoRequested
            userId:
              type: string
              format: uuid
              description: Unique identifier of the user who requested the undo
    redoRequestPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: redoRequested
            userId:
              type: string
              format: uuid
              description: Unique identifier of the user who requested the redo
    erasePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          description: A list of square centers together with erase size
          properties:
            canvasObjectOperationType:
              const: erase
            size:
              type: integer
              format: int64
              description: Eraser square size
            centers:
              type: array
              items:
                $ref: '#/components/schemas/vec2'
    drawPayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: draw
            points:
              type: array
              items:
                $ref: '#/components/schemas/vec2'
            color:
                $ref: '#/components/schemas/color'
    createStickyNotePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: createStickyNote
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Sticky note text
            color:
              $ref: '#/components/schemas/color'
    createCommentPayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: createComment
            text:
              type: string
              description: Comment text
            timestamp:
              type: integer
              format: int64
              description: Timestamp of the comment
    createImagePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          description: Position is upper left corner. Only width is needed to keep aspect ratio.
          properties:
            canvasObjectOperationType:
              const: createImage
            name:
              type: string
            position:
              $ref: '#/components/schemas/vec2'
            width:
              type: integer
              format: int64
            size:
              $ref: '#/components/schemas/vec2'
              description: Image size which can also be inferred from the blob (immutable)
    updateStickyNotePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: updateStickyNote
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
            position:
              $ref: '#/components/schemas/vec2'
            text:
              type: string
              description: Sticky note text
            color:
              $ref: '#/components/schemas/color'
    updateCommentPayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: updateComment
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
            text:
              type: string
              description: Comment text
            timestamp:
              type: integer
              format: int64
              description: Timestamp of the comment
    updateImagePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          description: To resize or move the image
          properties:
            canvasObjectOperationType:
              const: updateImage
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
            position:
              $ref: '#/components/schemas/vec2'
            width:
              type: integer
              format: int64
    deleteStickyNotePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteStickyNote
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
    deleteImagePayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteImage
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
    deleteCommentPayload:
      allOf:
        - $ref: '#/components/schemas/canvasObjectOperation'
        - type: object
          properties:
            canvasObjectOperationType:
              const: deleteComment
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
    vec2:
      type: object
      properties:
        x:
          type: integer
          format: int64
          description: X coordinate of the point
        y:
          type: integer
          format: int64
          description: Y coordinate of the point    
    color:
      type: string
      example: '#FF0000FF'
    canvasObjectOperation:
      type: object
      discriminator: canvasObjectOperationType
      properties:
        canvasObjectOperationType:
          type: string
          enum:
            - createStickyNote
            - createImage
            - createComment
            - updateStickyNote
            - updateComment
            - updateImage
            - deleteStickyNote
            - deleteImage
            - deleteComment
            - draw
            - erase
      required:
        - canvasObjectOperationType
    updatePayload:
      type: object
      required:
        - canvasObjectId
        - operation
      properties:
        canvasObjectType:
          enum:
            - stickyNote
            - image
            - comment
            - canvasMatrix
        operation:
          enum:
            - create
            - update
            - delete
            - draw
            - erase
        newValue:
          oneOf:
            - $ref: '#/components/schemas/createStickyNotePayload'
            - $ref: '#/components/schemas/createImagePayload'
            - $ref: '#/components/schemas/createCommentPayload'
            - $ref: '#/components/schemas/updateStickyNotePayload'
            - $ref: '#/components/schemas/updateCommentPayload'
            - $ref: '#/components/schemas/deleteStickyNotePayload'
            - $ref: '#/components/schemas/deleteImagePayload'
            - $ref: '#/components/schemas/deleteCommentPayload'
            - $ref: '#/components/schemas/drawPayload'
            - $ref: '#/components/schemas/erasePayload'
          discriminator: canvasObjectOperationType
          description: New or partial (differential) value of the canvas object
    boardUpdateProposedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: boardUpdateProposed
            proposalId:
              type: string
              format: uuid
              description: Unique identifier of the update proposal chosen by the client
            update: 
              $ref: '#/components/schemas/updatePayload'
            intermediate:
              type: boolean
              description: Indicates if the update is intermediate
    boardUpdateSucceededPayload:
      allOf:
        - $ref: '#/components/schemas/updatePayload' 
        - type: object
          properties:
            eventType:
              const: boardUpdateSucceeded
            proposalId:
              type: string
              format: uuid
              description: Unique identifier of the update proposal
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
    boardUpdatedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - $ref: '#/components/schemas/updatePayload'
        - type: object
          properties:
            eventType:
              const: boardUpdated
            changeId:
              type: integer
              format: int64
              description: Unique monotonically increasing identifier of the change
            userId:
              type: string
              format: uuid
              description: Unique identifier of the user who made the update
            intermediate:
              type: boolean
              description: Indicates if the update is intermediate
            canvasObjectId:
              type: string
              format: uuid
              description: Unique identifier of the canvas object
    boardUpdateFailedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: boardUpdateFailed
            proposalId:
              type: string
              format: uuid
              description: Unique identifier of the update proposal
            errorMessage:
              type: string
    welcomeUserPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: welcomeUser
            userId:
              type: string
              format: uuid
              description: User unique identifier
            sessionToken:
              type: string
              format: uuid
              description: Secret session token allocated to the user
    userPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              type: string
              enum:
                - userJoined
                - userLeft
            userId:
              type: string
              format: uuid
              description: User unique identifier
    reservationProposedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: reservationProposed
            canvasObjectId:
              type: string
              format: uuid
              description: Canvas object unique identifier
            proposalId:
              type: string
              format: uuid
              description: Proposal request uniques identifier that will be used in server reply
    canvasObjectReservedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: canvasObjectReserved
            canvasObjectId:
              type: string
              format: uuid
              description: Canvas object unique identifier
            reservationId:
              type: string
              format: uuid
              description: Reservation unique identifier
            userId:
              type: string
              format: uuid
              description: Indicates unique identifier of the user who reserved the canvas object
            expirationTimestamp:
              type: integer
              format: int64
              description: Indicates when the reservation will expire
    reservationProposalSucceededPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: reservationProposalSucceeded
            reservationId:
              type: string
              format: uuid
              description: Reservation unique identifier
            proposalId:
              type: string
              format: uuid
              description: Proposal request unique identifier that was used in client request
            expirationTimestamp:
              type: integer
              format: int64
              description: Indicates when the reservation will expire
    reservationProposalFailedPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: reservationProposalFailed
            errorMessage:
              type: string
            proposalId:
              type: string
              format: uuid
              description: Proposal request unique identifier that was used in client request
    reservationCancellationRequestedPayload:
      allOf:
        - $ref: '#/components/schemas/event' 
        - type: object
          properties:
            reservationId:
              type: string
              format: uuid
              description: Reservation unique identifier
    reservationCancelledPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            reservationId:
              type: string
              format: uuid
              description: Reservation unique identifier
    reservationExpiredPayload:
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            eventType:
              const: reservationExpired
            reservationId:
              type: string
              format: uuid
              description: Reservation unique identifier